#Java内存模型#
0.线程三大特性：
    a,原子性（保证数据一致、线程安全一部分
        一个操作或者多个操作，要么全部执行并且执行的过程不会被任何因素打断，要么就都不执行
    b,可见性
        当多个线程访问同一个变量时，一个线程修改了这个变量的值，其他线程能够立即看得到修改的值。
    c,有序性
        程序执行的顺序按照代码的先后顺序执行。

        -> 重排序：
        一般来说处理器为了提高程序运行效率，可能会对输入代码进行优化，它不保证程序中各个语句的执行先后顺序同代码中的顺序一致，但是它会保证程序最终执行结果和代码顺序执行的结果是一致的
        重排序对单线程运行是不会有任何问题，而多线程就不一定了，所以我们在多线程编程时就得考虑这个问题了。

1.多线程安全
    当多个线程同时共享，同一个全局变量或静态变量；
    - 做写操作时，可能发生数据冲突问题
    - 做读操作时，不会发生数据冲突问题
   解决方法：
    a,使用多线程之间同步synchronized/使用锁(lock)
        (只能让当前一个线程进行执行。代码执行完成后释放锁，让后才能让其他线程进行执行。

   多线程之间同步:当多个线程共享同一个资源,不会受到其他线程的干扰。

2.同步
    同步的前提： 
        1，必须要有两个或者两个以上的线程 
        2，必须是多个线程使用同一个锁 
    必须保证同步中只能有一个线程在运行 
        好处：解决了多线程的安全问题 
        弊端：多个线程需要判断锁，较为消耗资源、抢锁的资源。

3.java内存模型
    共享内存模型：Java内存模型(简称JMM)
    JMM决定一个线程对共享变量的写入时,能对另一个线程可见。
    JMM定义线程和主内存之间的抽象关系：线程之间的共享变量存储在主内存（main memory）中，每个线程都有一个私有的本地内存（local memory），本地内存中存储了该线程以读/写共享变量的副本。
    当多个线程同时访问一个数据的时候，可能本地内存没有及时刷新到主内存，所以就会发生线程安全问题。
    （本地内存是JMM的一个抽象概念，并不真实存在。它涵盖了缓存，写缓冲区，寄存器以及其他的硬件和编译器优化。）

4.ThreadLocal(Test04
    ThreadLocal提高一个线程的局部变量，访问某个线程拥有自己局部变量。
    * 当使用ThreadLocal维护变量时，ThreadLocal为每个使用该变量的线程提供独立的变量副本，所以每一个线程都可以独立地改变自己的副本，而不会影响其它线程所对应的副本。

    ThreadLocal实现原理:
        ThreadLocal通过map集合
        Map.put(“当前线程”,值)；

5.内置锁：互斥锁（使用synchronized关键字实现 (Test01，Test02
    线程进入同步代码块之前自动获取到锁，代码块执行完成正常退出或代码块中抛出异常退出时会释放掉锁
    1.同步代码块：锁的粒度更细；充当锁的对象：this/其它对象，更加灵活
              synchronized(对象)//这个对象可以为任意对象 
              { 
                  需要被同步的代码 
              } 

    2.同步方法：所有访问状态变量的方法都必须进行同步；充当锁的对象：调用同步方法的对象
              就是将可能会发生线程安全问题的代码，给包括起来。
              synchronized(同一个数据){
                  可能会发生线程冲突问题
              }
    静态同步函数：
        方法上加上static关键字，使用synchronized 关键字修饰 或者使用类.class文件。
        静态的同步函数使用的锁是  该函数所属字节码文件对象
        可以用 getClass方法获取，也可以用当前  类名.class 表示。

    synchronized 修饰方法使用锁是当前this锁。
    synchronized 修饰静态方法使用锁是当前类的字节码文件

6.volatile关键字（Test05
    线程间共享变量的可见性,不保证原子性

    一旦某个线程修改了该被volatile修饰的变量，它会保证修改的值会立即被更新到主存，当有其他线程需要读取时，可以立即获取修改之后的值

    Java中为了加快程序的运行效率，对一些变量的操作通常是在该线程的寄存器或是CPU缓存上进行的，之后才会同步到主存中，
    而加了volatile修饰符的变量则是直接读写主存。

    Volatile特性:
        a,保证此变量对所有的线程的可见性（保证了新值能立即同步到主内存 & 每次使用前立即从主内存刷新
        b,禁止指令重排序优化
            volatile修饰的变量，赋值后多执行了一个“load addl $0x0, (%esp)”操作，
                这个操作相当于一个内存屏障（指令重排序时不能把后面的指令重排序到内存屏障之前的位置），只有一个CPU访问内存时，并不需要内存屏障；
            指令重排序：CPU采用了允许将多条指令不按程序规定的顺序分开发送给各相应电路单元处理。

        性能：volatile 的读性能消耗与普通变量几乎相同，但是写操作稍慢，因为它需要在本地代码中插入许多内存屏障指令来保证处理器不发生乱序执行。

7.Volatile与Synchronized区别:
    1.volatile 有可见性但不能保证原子性
    2.性能方面：
        synchronized关键字是防止多个线程同时执行一段代码，就会影响程序执行效率，
        volatile关键字在某些情况下性能要优于synchronized。
        但是要注意volatile关键字是无法替代synchronized关键字的，因为volatile关键字无法保证操作的原子性。

8.多线程死锁(Test03
    同步中嵌套同步,导致锁无法释放

9.重排序
    数据依赖性：仅针对单个处理器中执行的指令序列和单个线程中执行的操作，不同处理器之间和不同线程之间的数据依赖性不被编译器和处理器考虑。
    编译器和处理器在重排序时，会遵守数据依赖性，编译器和处理器不会改变存在数据依赖关系的两个操作的执行顺序。

    as-if-serial：不管怎么重排序，（单线程）程序的执行结果不能被改变
        （单线程程序中，对存在控制依赖的操作重排序，不会改变执行结果

    程序顺序规则（happens- before）

    重排序对多线程会改变结果


